--- alsa-utils-1.2.10/amidi/amidi.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/amidi/amidi.c	2023-09-02 20:03:00.505305458 +0200
@@ -446,7 +446,7 @@ static void print_byte(unsigned char byt
 	printf("%02X", byte);
 }
 
-static void sig_handler(int)
+static void sig_handler(int s_ __attribute__((unused)))
 {
 	stop = 1;
 }
--- alsa-utils-1.2.10/axfer/subcmd-list.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/subcmd-list.c	2023-09-02 20:16:45.004172097 +0200
@@ -19,7 +19,7 @@ enum list_op {
 };
 
 static int dump_device(snd_ctl_t *handle, const char *id, const char *name,
-		       snd_pcm_stream_t, snd_pcm_info_t *info)
+		       snd_pcm_stream_t s_ __attribute__((unused)), snd_pcm_info_t *info)
 {
 	unsigned int i, count;
 	int err;
--- alsa-utils-1.2.10/axfer/container-raw.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/container-raw.c	2023-09-02 21:08:46.753926794 +0200
@@ -13,10 +13,10 @@
 #include <sys/stat.h>
 #include <unistd.h>
 
-static int raw_builder_pre_process(struct container_context *,
-				   snd_pcm_format_t *,
-				   unsigned int *,
-				   unsigned int *,
+static int raw_builder_pre_process(struct container_context *a_ __attribute__((unused)),
+				   snd_pcm_format_t *b_ __attribute__((unused)),
+				   unsigned int *c_ __attribute__((unused)),
+				   unsigned int *d_ __attribute__((unused)),
 				   uint64_t *byte_count)
 {
 	*byte_count = UINT64_MAX;
@@ -25,9 +25,9 @@ static int raw_builder_pre_process(struc
 }
 
 static int raw_parser_pre_process(struct container_context *cntr,
-				  snd_pcm_format_t *,
-				  unsigned int *,
-				  unsigned int *,
+				  snd_pcm_format_t *a_ __attribute__((unused)),
+				  unsigned int *b_ __attribute__((unused)),
+				  unsigned int *c_ __attribute__((unused)),
 				  uint64_t *byte_count)
 {
 	struct stat buf = {0};
--- alsa-utils-1.2.10/axfer/mapper-single.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/mapper-single.c	2023-09-02 21:14:31.962056641 +0200
@@ -62,7 +62,7 @@ static void align_from_vector(void *fram
 
 static int single_pre_process(struct mapper_context *mapper,
 			      struct container_context *cntrs,
-			      unsigned int)
+			      unsigned int a_ __attribute__((unused)))
 {
 	struct single_state *state = mapper->private_data;
 	unsigned int bytes_per_buffer;
@@ -110,7 +110,7 @@ static int single_muxer_process_frames(s
 				       void *frame_buf,
 				       unsigned int *frame_count,
 				       struct container_context *cntrs,
-				       unsigned int)
+				       unsigned int a_ __attribute__((unused)))
 {
 	struct single_state *state = mapper->private_data;
 	void *src;
@@ -141,7 +141,7 @@ static int single_demuxer_process_frames
 					 void *frame_buf,
 					 unsigned int *frame_count,
 					 struct container_context *cntrs,
-					 unsigned int)
+					 unsigned int a_ __attribute__((unused)))
 {
 	struct single_state *state = mapper->private_data;
 	void *dst;
--- alsa-utils-1.2.10/axfer/xfer-options.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/xfer-options.c	2023-09-02 21:15:24.808437014 +0200
@@ -447,7 +447,7 @@ static int generate_path_with_suffix(str
 
 static int generate_path_without_suffix(struct xfer_context *xfer,
 				        const char *template,
-					unsigned int index, const char *)
+					unsigned int index, const char * a_ __attribute__((unused)))
 {
 	static const char *const single_format = "%s";
 	static const char *const multiple_format = "%s-%i";
--- alsa-utils-1.2.10/axfer/xfer-libasound.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/xfer-libasound.c	2023-09-02 21:17:16.931162927 +0200
@@ -60,7 +60,7 @@ static const struct option l_opts[] = {
 };
 
 static int xfer_libasound_init(struct xfer_context *xfer,
-			       snd_pcm_stream_t)
+			       snd_pcm_stream_t a_ __attribute__((unused)))
 {
 	struct libasound_state *state = xfer->private_data;
 	int err;
@@ -887,7 +887,7 @@ static void xfer_libasound_destroy(struc
 	state->log = NULL;
 }
 
-static void xfer_libasound_help(struct xfer_context *)
+static void xfer_libasound_help(struct xfer_context *a_ __attribute__((unused)))
 {
 	printf(
 "      [BASICS]\n"
--- alsa-utils-1.2.10/axfer/xfer-libasound-irq-rw.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/xfer-libasound-irq-rw.c	2023-09-02 21:17:47.560996991 +0200
@@ -313,7 +313,7 @@ error:
 }
 
 static int w_process_frames_nonblocking(struct libasound_state *state,
-					snd_pcm_state_t,
+					snd_pcm_state_t a_ __attribute__((unused)),
 					unsigned int *frame_count,
 					struct mapper_context *mapper,
 					struct container_context *cntrs)
--- alsa-utils-1.2.10/axfer/subcmd-transfer.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/subcmd-transfer.c	2023-09-02 21:18:46.827342584 +0200
@@ -40,7 +40,7 @@ static void handle_unix_signal_for_finis
 	ctx_ptr->interrupted = true;
 }
 
-static void handle_unix_signal_for_suspend(int)
+static void handle_unix_signal_for_suspend(int a_ __attribute__((unused)))
 {
 	sigset_t curr, prev;
 	struct sigaction sa = {0};
@@ -439,7 +439,7 @@ static int context_process_frames(struct
 }
 
 static void context_post_process(struct context *ctx,
-				 uint64_t)
+				 uint64_t a_ __attribute__((unused)))
 {
 	uint64_t total_frame_count;
 	unsigned int i;
--- alsa-utils-1.2.10/axfer/waiter-poll.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/waiter-poll.c	2023-09-02 21:19:19.080501187 +0200
@@ -13,7 +13,7 @@
 #include <errno.h>
 #include <poll.h>
 
-static int poll_prepare(struct waiter_context *)
+static int poll_prepare(struct waiter_context *a_ __attribute__((unused)))
 {
 	// Nothing to do because an instance of waiter has required data.
 	return 0;
@@ -30,7 +30,7 @@ static int poll_wait_event(struct waiter
 	return err;
 }
 
-static void poll_release(struct waiter_context *)
+static void poll_release(struct waiter_context *a_ __attribute__((unused)))
 {
 	// Nothing to do because an instance of waiter has required data.
 	return;
--- alsa-utils-1.2.10/axfer/waiter-select.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/axfer/waiter-select.c	2023-09-02 21:19:43.787034007 +0200
@@ -34,7 +34,7 @@ struct select_state {
 	fd_set rfds_ex;
 };
 
-static int select_prepare(struct waiter_context *)
+static int select_prepare(struct waiter_context *a_ __attribute__((unused)))
 {
 	return 0;
 }
@@ -94,7 +94,7 @@ static int select_wait_event(struct wait
 	return err;
 }
 
-static void select_release(struct waiter_context *)
+static void select_release(struct waiter_context *a_ __attribute__((unused)))
 {
 	return;
 }
--- alsa-utils-1.2.10/alsaloop/alsaloop.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/alsaloop/alsaloop.c	2023-09-02 21:20:45.673365406 +0200
@@ -821,7 +821,7 @@ static void send_to_all(int sig)
 	}
 }
 
-static void signal_handler(int)
+static void signal_handler(int s_ __attribute__((unused)))
 {
 	quit = 1;
 	send_to_all(SIGUSR2);
--- alsa-utils-1.2.10/alsaloop/pcmjob.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/alsaloop/pcmjob.c	2023-09-02 21:26:37.174794493 +0200
@@ -1794,7 +1794,7 @@ static int ctl_event_check(snd_ctl_elem_
 }
 
 static int handle_ctl_events(struct loopback_handle *lhandle,
-			     unsigned short)
+			     unsigned short a_ __attribute__((unused)))
 {
 	struct loopback *loop = lhandle->loopback;
 	snd_ctl_event_t *ev;
--- alsa-utils-1.2.10/bat/bat.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/bat/bat.c	2023-09-02 21:27:30.267840197 +0200
@@ -158,7 +158,7 @@ static void get_format(struct bat *bat,
 	}
 }
 
-static inline int thread_wait_completion(struct bat *, pthread_t id, int **val)
+static inline int thread_wait_completion(struct bat *a_ __attribute__((unused)), pthread_t id, int **val)
 {
 	int err;
 
--- alsa-utils-1.2.10/bat/common.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/bat/common.c	2023-09-02 21:28:16.034258925 +0200
@@ -47,7 +47,7 @@ static int update_fmt_to_bat(struct bat
 }
 
 /* calculate frames and update to bat */
-static int update_frames_to_bat(struct bat *bat, struct wav_chunk_header *header, FILE *)
+static int update_frames_to_bat(struct bat *bat, struct wav_chunk_header *header, FILE *f_ __attribute__((unused)))
 {
 	/* The number of analyzed captured frames is arbitrarily set to half of
 	   the number of frames of the wav file or the number of frames of the
--- alsa-utils-1.2.10/seq/aconnect/aconnect.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/seq/aconnect/aconnect.c	2023-09-02 21:29:22.800563888 +0200
@@ -193,7 +193,7 @@ static void do_search_port(snd_seq_t *se
 }
 
 
-static void print_port(snd_seq_t *, snd_seq_client_info_t *cinfo,
+static void print_port(snd_seq_t *s_ __attribute__((unused)), snd_seq_client_info_t *cinfo,
 		       snd_seq_port_info_t *pinfo, int count)
 {
 	if (! count) {
@@ -247,8 +247,8 @@ static void print_port_and_subs(snd_seq_
 /*
  * remove all (exported) connections
  */
-static void remove_connection(snd_seq_t *seq, snd_seq_client_info_t *,
-			      snd_seq_port_info_t *pinfo, int)
+static void remove_connection(snd_seq_t *seq, snd_seq_client_info_t *s __attribute__((unused)),
+			      snd_seq_port_info_t *pinfo, int a_ __attribute__((unused)))
 {
 	snd_seq_query_subscribe_t *query;
 	snd_seq_port_info_t *port;
--- alsa-utils-1.2.10/seq/aplaymidi/arecordmidi.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/seq/aplaymidi/arecordmidi.c	2023-09-02 21:30:11.200301684 +0200
@@ -719,7 +719,7 @@ static void version(void)
 	fputs("arecordmidi version " SND_UTIL_VERSION_STR "\n", stderr);
 }
 
-static void sighandler(int)
+static void sighandler(int s_ __attribute__((unused)))
 {
 	stop = 1;
 }
--- alsa-utils-1.2.10/seq/aseqdump/aseqdump.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/seq/aseqdump/aseqdump.c	2023-09-02 21:30:40.380143603 +0200
@@ -676,7 +676,7 @@ static void version(void)
 	puts("aseqdump version " SND_UTIL_VERSION_STR);
 }
 
-static void sighandler(int)
+static void sighandler(int s_ __attribute__((unused)))
 {
 	stop = 1;
 }
--- alsa-utils-1.2.10/seq/aseqnet/aseqnet.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/seq/aseqnet/aseqnet.c	2023-09-02 21:32:12.056313617 +0200
@@ -334,7 +334,7 @@ static void get_net_addr(struct addrinfo
 /*
  * signal handler
  */
-static void sigterm_exit(int)
+static void sigterm_exit(int s_ __attribute__((unused)))
 {
 	close_files();
 	exit(1);
--- alsa-utils-1.2.10/alsaucm/dump.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/alsaucm/dump.c	2023-09-02 21:34:01.105722846 +0200
@@ -93,7 +93,7 @@ static char *tesc(const char *s, char *b
 
 #define ESC(s, esc) tesc((s), (esc), sizeof(esc))
 
-static int text_verb_start(struct renderer *, const char *verb, const char *comment)
+static int text_verb_start(struct renderer *r_ __attribute__((unused)), const char *verb, const char *comment)
 {
 	char buf1[128], buf2[128];
 	printf("Verb.%s {\n", ESC(verb, buf1));
@@ -102,13 +102,13 @@ static int text_verb_start(struct render
 	return 0;
 }
 
-static int text_verb_end(struct renderer *)
+static int text_verb_end(struct renderer *r_ __attribute__((unused)))
 {
 	printf("}\n");
 	return 0;
 }
 
-static int text_2nd_level_begin(struct renderer *,
+static int text_2nd_level_begin(struct renderer *r_ __attribute__((unused)),
 				const char *key,
 				const char *val,
 				const char *comment)
@@ -120,19 +120,19 @@ static int text_2nd_level_begin(struct r
 	return 0;
 }
 
-static int text_2nd_level_end(struct renderer *)
+static int text_2nd_level_end(struct renderer *r_ __attribute__((unused)))
 {
 	printf("\t}\n");
 	return 0;
 }
 
-static int text_2nd_level(struct renderer *, const char *txt)
+static int text_2nd_level(struct renderer *r_ __attribute__((unused)), const char *txt)
 {
 	printf("\t\t%s", txt);
 	return 0;
 }
 
-static int text_3rd_level(struct renderer *, const char *txt)
+static int text_3rd_level(struct renderer *r_ __attribute__((unused)), const char *txt)
 {
 	printf("\t\t\t%s", txt);
 	return 0;
@@ -266,7 +266,7 @@ static void json_block(struct renderer *
 	j->block[level] = last ? 0 : 1;
 }
 
-static int json_init(struct renderer *)
+static int json_init(struct renderer *r_ __attribute__((unused)))
 {
 	printf("{\n  \"Verbs\": {");
 	return 0;
@@ -325,13 +325,13 @@ static int json_2nd_level_end(struct ren
 	return 0;
 }
 
-static int json_2nd_level(struct renderer *, const char *txt)
+static int json_2nd_level(struct renderer *r_ __attribute__((unused)), const char *txt)
 {
 	printf("          %s", txt);
 	return 0;
 }
 
-static int json_3rd_level(struct renderer *, const char *txt)
+static int json_3rd_level(struct renderer *r_ __attribute__((unused)), const char *txt)
 {
 	printf("            %s", txt);
 	return 0;
@@ -360,7 +360,7 @@ static int json_supcon_start(struct rend
 	return 0;
 }
 
-static int json_supcon_value(struct renderer *r, const char *value, int)
+static int json_supcon_value(struct renderer *r, const char *value, int a_ __attribute__((unused)))
 {
 	char buf[256];
 	JESC(value, buf);
--- alsa-utils-1.2.10/topology/nhlt/nhlt-processor.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/nhlt/nhlt-processor.c	2023-09-02 21:35:13.741996008 +0200
@@ -87,7 +87,7 @@ static void debug_print_nhlt(struct nhlt
 	fprintf(stdout, "\n");
 }
 #else
-static void debug_print_nhlt(struct nhlt *, struct endpoint_descriptor **) {}
+static void debug_print_nhlt(struct nhlt *n_ __attribute__((unused)), struct endpoint_descriptor **d_ __attribute__((unused))) {}
 #endif
 
 static int print_as_hex_bytes(uint8_t *manifest_buffer, uint32_t manifest_size,
@@ -313,7 +313,7 @@ static int nhlt_get_flat_buffer(struct n
 }
 
 /* called at the end of topology pre-processing, create flat buffer from variable size nhlt */
-static int nhlt_create(struct intel_nhlt_params *nhlt, snd_config_t *input, snd_config_t *,
+static int nhlt_create(struct intel_nhlt_params *nhlt, snd_config_t *input, snd_config_t *c_ __attribute__((unused)),
 		       uint8_t **nhlt_buffer, uint32_t *nhlt_size)
 {
 	struct endpoint_descriptor *eps[MAX_ENDPOINT_COUNT];
--- alsa-utils-1.2.10/topology/nhlt/intel/dmic-nhlt.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/nhlt/intel/dmic-nhlt.c	2023-09-02 21:35:49.855133700 +0200
@@ -155,7 +155,7 @@ static int set_vendor_mic_data(struct in
 				   horizontal_angle_end);
 }
 
-static int set_bytes_data(struct intel_nhlt_params *, snd_config_t *cfg)
+static int set_bytes_data(struct intel_nhlt_params *p_ __attribute__((unused)), snd_config_t *cfg)
 {
 	snd_config_iterator_t i, next;
 	snd_config_t *n;
--- alsa-utils-1.2.10/topology/nhlt/intel/dmic/dmic-debug.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/nhlt/intel/dmic/dmic-debug.c	2023-09-02 21:36:47.964818893 +0200
@@ -181,7 +181,7 @@ void dmic_print_internal(struct intel_dm
 }
 
 #else /* NHLT_DEBUG */
-void dmic_print_bytes_as_hex(uint8_t *, size_t) {}
-void dmic_print_integers_as_hex(uint32_t *, size_t) {}
-void dmic_print_internal(struct intel_dmic_params *) {}
+void dmic_print_bytes_as_hex(uint8_t *a_ __attribute__((unused)), size_t s_ __attribute__((unused))) {}
+void dmic_print_integers_as_hex(uint32_t *a_ __attribute__((unused)), size_t s_ __attribute__((unused))) {}
+void dmic_print_internal(struct intel_dmic_params *p_ __attribute((unused))) {}
 #endif
--- alsa-utils-1.2.10/topology/nhlt/intel/ssp/ssp-debug.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/nhlt/intel/ssp/ssp-debug.c	2023-09-02 21:37:14.978005883 +0200
@@ -252,6 +252,6 @@ void ssp_print_internal(struct intel_ssp
 }
 
 #else /* NHLT_DEBUG */
-void ssp_print_internal(struct intel_ssp_params *) {}
-void ssp_print_calculated(struct intel_ssp_params *) {}
+void ssp_print_internal(struct intel_ssp_params *p_ __attribute__((unused))) {}
+void ssp_print_calculated(struct intel_ssp_params *p_ __attribute__((unused))) {}
 #endif
--- alsa-utils-1.2.10/topology/nhlt/intel/ssp/ssp-process.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/nhlt/intel/ssp/ssp-process.c	2023-09-02 21:38:03.801074719 +0200
@@ -952,7 +952,7 @@ int ssp_set_params(struct intel_nhlt_par
 	return 0;
 }
 
-int ssp_hw_set_params(struct intel_nhlt_params *nhlt, const char *format, const char *,
+int ssp_hw_set_params(struct intel_nhlt_params *nhlt, const char *format, const char *s_ __attribute__((unused)),
 		      const char *bclk, const char *bclk_invert, const char *fsync,
 		      const char *fsync_invert, int mclk_freq, int bclk_freq, int fsync_freq,
 		      int tdm_slots, int tdm_slot_width, int tx_slots, int rx_slots)
--- alsa-utils-1.2.10/topology/pre-processor.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/pre-processor.c	2023-09-02 21:38:59.357440411 +0200
@@ -231,8 +231,8 @@ void tplg_pp_config_debug(struct tplg_pr
 	snd_config_save(cfg, tplg_pp->dbg_output);
 }
 #else
-void tplg_pp_debug(char *, ...) {}
-void tplg_pp_config_debug(struct tplg_pre_processor *, snd_config_t *){}
+void tplg_pp_debug(char *p_ __attribute__((unused)), ...) {}
+void tplg_pp_config_debug(struct tplg_pre_processor *p_ __attribute__((unused)), snd_config_t *c_ __attribute__((unused))){}
 #endif
 
 static int pre_process_config(struct tplg_pre_processor *tplg_pp, snd_config_t *cfg)
@@ -640,7 +640,7 @@ static int pre_process_includes_all(stru
 }
 
 /* duplicate the existing objects in src into dest and update with new attribute */
-static int pre_process_add_objects(struct tplg_pre_processor *, int *object_count,
+static int pre_process_add_objects(struct tplg_pre_processor *p_ __attribute__((unused)), int *object_count,
 				   snd_config_t *src, snd_config_t *dest, snd_config_t *attr_cfg)
 {
 	snd_config_iterator_t i, next;
--- alsa-utils-1.2.10/topology/pre-process-class.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/pre-process-class.c	2023-09-02 21:39:32.013930162 +0200
@@ -127,7 +127,7 @@ snd_config_t *tplg_class_lookup(struct t
 }
 
 /* find the attribute config by name in the class definition */
-snd_config_t *tplg_class_find_attribute_by_name(struct tplg_pre_processor *,
+snd_config_t *tplg_class_find_attribute_by_name(struct tplg_pre_processor *p_ __attribute__((unused)),
 						snd_config_t *class, const char *name)
 {
 	snd_config_t *attr = NULL;
@@ -152,7 +152,7 @@ snd_config_t *tplg_class_find_attribute_
 }
 
 /* get the name of the attribute that must have a unique value in the object instance */
-const char *tplg_class_get_unique_attribute_name(struct tplg_pre_processor *,
+const char *tplg_class_get_unique_attribute_name(struct tplg_pre_processor *p_ __attribute__((unused)),
 						 snd_config_t *class)
 {
 	snd_config_t *unique;
@@ -177,7 +177,7 @@ const char *tplg_class_get_unique_attrib
 }
 
 /* get attribute type from the definition */
-snd_config_type_t tplg_class_get_attribute_type(struct tplg_pre_processor *,
+snd_config_type_t tplg_class_get_attribute_type(struct tplg_pre_processor *p_ __attribute__((unused)),
 						snd_config_t *attr)
 {
 	snd_config_t *type;
@@ -208,7 +208,7 @@ snd_config_type_t tplg_class_get_attribu
 }
 
 /* get token_ref for attribute with name attr_name in the class */
-const char *tplg_class_get_attribute_token_ref(struct tplg_pre_processor *,
+const char *tplg_class_get_attribute_token_ref(struct tplg_pre_processor *p_ __attribute__((unused)),
 					       snd_config_t *class, const char *attr_name)
 {
 	snd_config_t *attributes, *attr, *token_ref;
@@ -235,7 +235,7 @@ const char *tplg_class_get_attribute_tok
 }
 
 /* convert a valid attribute string value to the corresponding tuple value */
-long tplg_class_attribute_valid_tuple_value(struct tplg_pre_processor *,
+long tplg_class_attribute_valid_tuple_value(struct tplg_pre_processor *p_ __attribute__((unused)),
 					    snd_config_t *class, snd_config_t *attr)
 {
 
--- alsa-utils-1.2.10/topology/pre-process-object.c.orig	2023-09-01 17:36:26.000000000 +0200
+++ alsa-utils-1.2.10/topology/pre-process-object.c	2023-09-02 21:41:43.369885213 +0200
@@ -31,7 +31,7 @@
 
 /* Parse VendorToken object, create the "SectionVendorToken" and save it */
 int tplg_build_vendor_token_object(struct tplg_pre_processor *tplg_pp,
-				   snd_config_t *obj_cfg, snd_config_t *)
+				   snd_config_t *obj_cfg, snd_config_t *c_ __attribute__((unused)))
 {
 	snd_config_iterator_t i, next;
 	snd_config_t *vtop, *n, *obj;
@@ -196,7 +196,7 @@ int tplg_build_data_object(struct tplg_p
 	return tplg_parent_update(tplg_pp, parent, "data", name);
 }
 
-static int tplg_create_config_template(struct tplg_pre_processor *,
+static int tplg_create_config_template(struct tplg_pre_processor *p_ __attribute__((unused)),
 				       snd_config_t **template,
 				       const struct config_template_items *items)
 {
@@ -499,7 +499,7 @@ min_max_check:
 }
 
 /* get object's name attribute value */
-const char *tplg_object_get_name(struct tplg_pre_processor *,
+const char *tplg_object_get_name(struct tplg_pre_processor *p_ __attribute__((unused)),
 				 snd_config_t *object)
 {
 	snd_config_t *cfg;
@@ -518,7 +518,7 @@ const char *tplg_object_get_name(struct
 }
 
 /* look up the instance of object in a config */
-static snd_config_t *tplg_object_lookup_in_config(struct tplg_pre_processor *,
+static snd_config_t *tplg_object_lookup_in_config(struct tplg_pre_processor *p_ __attribute__((unused)),
 						  snd_config_t *class, const char *type,
 						  const char *class_name, const char *id)
 {
@@ -977,7 +977,7 @@ template:
 }
 
 static int tplg_build_generic_object(struct tplg_pre_processor *tplg_pp, snd_config_t *obj_cfg,
-				     snd_config_t *)
+				     snd_config_t *c_ __attribute__((unused)))
 {
 	snd_config_t *wtop;
 	const char *name;
@@ -1090,7 +1090,7 @@ const struct build_function_map object_b
 	 NULL, &pcm_caps_config},
 };
 
-static const struct build_function_map *tplg_object_get_map(struct tplg_pre_processor *,
+static const struct build_function_map *tplg_object_get_map(struct tplg_pre_processor *p_ __attribute__((unused)),
 							    snd_config_t *obj)
 {
 	snd_config_iterator_t first;
@@ -1145,7 +1145,7 @@ snd_config_t *tplg_object_get_section(st
 }
 
 /* return 1 if attribute not found in search_config, 0 on success and negative value on error */
-static int tplg_object_copy_and_add_param(struct tplg_pre_processor *,
+static int tplg_object_copy_and_add_param(struct tplg_pre_processor *p_ __attribute__((unused)),
 					  snd_config_t *obj,
 					  snd_config_t *attr_cfg,
 					  snd_config_t *search_config)
@@ -1351,7 +1351,7 @@ static int tplg_object_pre_process_child
 	return 0;
 }
 
-static int tplg_construct_object_name(struct tplg_pre_processor *, snd_config_t *obj,
+static int tplg_construct_object_name(struct tplg_pre_processor *p_ __attribute__((unused)), snd_config_t *obj,
 				      snd_config_t *class_cfg)
 {
 	snd_config_iterator_t i, next;
@@ -1547,7 +1547,7 @@ static int tplg_object_set_unique_attrib
  * Helper function to get object instance config which is 2 nodes down from class_type config.
  * ex: Get the pointer to the config node with ID "0" from the input config Widget.pga.0 {}
  */
-snd_config_t *tplg_object_get_instance_config(struct tplg_pre_processor *,
+snd_config_t *tplg_object_get_instance_config(struct tplg_pre_processor *p_ __attribute__((unused)),
 					snd_config_t *class_type)
 {
 	snd_config_iterator_t first;
